import random
from typing import Any, Dict, Union, Optional

import numpy as np
from field_move_env import FieldMoveEnv

# Taken from https://github.com/pret/pokered/blob/master/data/maps/map_header_pointers.asm
MAP_LABELS = [
    "PalletTown",
    "ViridianCity",
    "PewterCity",
    "CeruleanCity",
    "LavenderTown",
    "VermilionCity",
    "CeladonCity",
    "FuchsiaCity",
    "CinnabarIsland",
    "IndigoPlateau",
    "SaffronCity",
    "SaffronCity",
    "Route1",
    "Route2",
    "Route3",
    "Route4",
    "Route5",
    "Route6",
    "Route7",
    "Route8",
    "Route9",
    "Route10",
    "Route11",
    "Route12",
    "Route13",
    "Route14",
    "Route15",
    "Route16",
    "Route17",
    "Route18",
    "Route19",
    "Route20",
    "Route21",
    "Route22",
    "Route23",
    "Route24",
    "Route25",
    "RedsHouse1F",
    "RedsHouse2F",
    "BluesHouse",
    "OaksLab",
    "ViridianPokecenter",
    "ViridianMart",
    "School",
    "ViridianHouse",
    "ViridianGym",
    "DiglettsCaveRoute2",
    "ViridianForestExit",
    "Route2House",
    "Route2Gate",
    "ViridianForestEntrance",
    "ViridianForest",
    "Museum1F",
    "Museum2F",
    "PewterGym",
    "PewterHouse1",
    "PewterMart",
    "PewterHouse2",
    "PewterPokecenter",
    "MtMoon1",
    "MtMoon2",
    "MtMoon3",
    "CeruleanHouseTrashed",
    "CeruleanHouse1",
    "CeruleanPokecenter",
    "CeruleanGym",
    "BikeShop",
    "CeruleanMart",
    "MtMoonPokecenter",
    "CeruleanHouseTrashed",
    "Route5Gate",
    "UndergroundPathEntranceRoute5",
    "DayCareM",
    "Route6Gate",
    "UndergroundPathEntranceRoute6",
    "UndergroundPathEntranceRoute6",
    "Route7Gate",
    "UndergroundPathEntranceRoute7",
    "UndergroundPathEntranceRoute7Copy",
    "Route8Gate",
    "UndergroundPathEntranceRoute8",
    "RockTunnelPokecenter",
    "RockTunnel1",
    "PowerPlant",
    "Route11Gate",
    "DiglettsCaveEntranceRoute11",
    "Route11GateUpstairs",
    "Route12Gate",
    "BillsHouse",
    "VermilionPokecenter",
    "FanClub",
    "VermilionMart",
    "VermilionGym",
    "VermilionHouse1",
    "VermilionDock",
    "SSAnne1",
    "SSAnne2",
    "SSAnne3",
    "SSAnne4",
    "SSAnne5",
    "SSAnne6",
    "SSAnne7",
    "SSAnne8",
    "SSAnne9",
    "SSAnne10",
    "Lance",
    "Lance",
    "Lance",
    "VictoryRoad1",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "Lance",
    "HallofFameRoom",
    "UndergroundPathNS",
    "Gary",
    "UndergroundPathWE",
    "CeladonMart1",
    "CeladonMart2",
    "CeladonMart3",
    "CeladonMart4",
    "CeladonMartRoof",
    "CeladonMartElevator",
    "CeladonMansion1",
    "CeladonMansion2",
    "CeladonMansion3",
    "CeladonMansion4",
    "CeladonMansion5",
    "CeladonPokecenter",
    "CeladonGym",
    "CeladonGameCorner",
    "CeladonMart5",
    "CeladonPrizeRoom",
    "CeladonDiner",
    "CeladonHouse",
    "CeladonHotel",
    "LavenderPokecenter",
    "PokemonTower1",
    "PokemonTower2",
    "PokemonTower3",
    "PokemonTower4",
    "PokemonTower5",
    "PokemonTower6",
    "PokemonTower7",
    "LavenderHouse1",
    "LavenderMart",
    "LavenderHouse2",
    "FuchsiaMart",
    "FuchsiaHouse1",
    "FuchsiaPokecenter",
    "FuchsiaHouse2",
    "SafariZoneEntrance",
    "FuchsiaGym",
    "FuchsiaMeetingRoom",
    "SeafoamIslands2",
    "SeafoamIslands3",
    "SeafoamIslands4",
    "SeafoamIslands5",
    "VermilionHouse2",
    "FuchsiaHouse3",
    "Mansion1",
    "CinnabarGym",
    "Lab1",
    "Lab2",
    "Lab3",
    "Lab4",
    "CinnabarPokecenter",
    "CinnabarMart",
    "CinnabarMart",
    "IndigoPlateauLobby",
    "CopycatsHouse1F",
    "CopycatsHouse2F",
    "FightingDojo",
    "SaffronGym",
    "SaffronHouse1",
    "SaffronMart",
    "SilphCo1",
    "SaffronPokecenter",
    "SaffronHouse2",
    "Route15Gate",
    "Route15GateUpstairs",
    "Route16Gate",
    "Route16GateUpstairs",
    "Route16House",
    "Route12House",
    "Route18Gate",
    "Route18GateUpstairs",
    "SeafoamIslands1",
    "Route22Gate",
    "VictoryRoad2",
    "Route12GateUpstairs",
    "VermilionHouse3",
    "DiglettsCave",
    "VictoryRoad3",
    "RocketHideout1",
    "RocketHideout2",
    "RocketHideout3",
    "RocketHideout4",
    "RocketHideoutElevator",
    "RocketHideoutElevator",
    "RocketHideoutElevator",
    "RocketHideoutElevator",
    "SilphCo2",
    "SilphCo3",
    "SilphCo4",
    "SilphCo5",
    "SilphCo6",
    "SilphCo7",
    "SilphCo8",
    "Mansion2",
    "Mansion3",
    "Mansion4",
    "SafariZoneEast",
    "SafariZoneNorth",
    "SafariZoneWest",
    "SafariZoneCenter",
    "SafariZoneRestHouse1",
    "SafariZoneSecretHouse",
    "SafariZoneRestHouse2",
    "SafariZoneRestHouse3",
    "SafariZoneRestHouse4",
    "UnknownDungeon2",
    "UnknownDungeon3",
    "UnknownDungeon1",
    "NameRater",
    "CeruleanHouse2",
    "Route16Gate",
    "RockTunnel2",
    "SilphCo9",
    "SilphCo10",
    "SilphCo11",
    "SilphCoElevator",
    "SilphCo2",
    "SilphCo2",
    "TradeCenter",
    "Colosseum",
    "SilphCo2",
    "SilphCo2",
    "SilphCo2",
    "SilphCo2",
    "Lorelei",
    "Bruno",
    "Agatha",
]

MAP_IDXS = {key: idx for idx, key in enumerate(MAP_LABELS)}
POKECENTERS_IDXS = [
    MAP_IDXS[key]
    for key in (
        "ViridianPokecenter",
        "PewterPokecenter",
        "CeruleanPokecenter",
        "VermilionPokecenter",
        "LavenderPokecenter",
        "FuchsiaPokecenter",
        "CinnabarPokecenter",
        "SaffronPokecenter",
        "CeladonPokecenter",
    )
]


class WarpEnv(FieldMoveEnv):
    """
    This Env is a "game" to see how fast you can reach a pokemon center from one of the
    """

    def __init__(self, config: Optional[Dict[str, Union[int, float]]] = None):
        super().__init__(config=config)
        self.max_steps = config.get("max_steps", 1000)

    def reset(self, seed: Optional[int] = None):
        self.step_count = 0
        # choose a random target pokemon center
        self.target_pokecenter = random.choice(POKECENTERS_IDXS)
        return super().reset()

    def update_obs(self):
        super().update_obs()

    def get_game_state_reward(self, print_stats: bool = False) -> dict[str, float]:
        return {"steps": (self.max_steps - self.step_count) / self.max_steps}

    def check_if_done(self) -> float:
        # https://github.com/pret/pokered/blob/master/ram/wram.asm#L2052
        return (
            self.step_count >= self.max_steps
            or self.read_m(0xD35E) == self.target_pokecenter
        )
